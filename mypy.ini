# Global options:

[mypy]
packages = abe,test
;exclude = (?x)(
;    test/unit_test.{1,64}.py    # Ignore the code of unit test because of the usage of mock
;  )

show_traceback = True

warn_unused_configs = True
disallow_untyped_calls = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_return_any = True
no_implicit_reexport = True
strict_equality = True
strict_concatenate = True

# Configuration for test files
# Reference: https://mypy.readthedocs.io/en/stable/error_codes.html
# 
# Best Practice: Use inline # type: ignore[misc] comments on @pytest.fixture 
# and @pytest.mark.asyncio decorators instead of per-module configuration.
# This approach is recommended because:
# 1. Explicit: Each suppression is visible at the point where it's needed
# 2. Targeted: Only suppresses the specific error on that specific decorator
# 3. Maintainable: Future developers can see exactly why the ignore is there
# 4. Reliable: Works consistently across all test modules
#
# Reference for inline error suppression:
# https://mypy.readthedocs.io/en/stable/error_codes.html#silencing-errors-based-on-error-codes
#
# Example usage in test files:
#   @pytest.fixture  # type: ignore[misc]
#   def my_fixture() -> None:
#       pass
#
#   @pytest.mark.asyncio  # type: ignore[misc]
#   async def test_something() -> None:
#       pass
[mypy-test.*]
disable_error_code = no-untyped-decorator
